# Use this open statement to create an OpenGL view:
#/vis/open OGL 600x600-0+0
#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/tracking/storeTrajectory 1
/vis/viewer/set/autoRefresh false
/vis/verbose quiet
#
# Draw geometry:
/vis/drawVolume
#
# Specify view angle:
/vis/viewer/set/viewpointThetaPhi 90. 180.
#
# Specify zoom value:
/vis/viewer/zoom 0.03
#
# Specify style (surface or wireframe):
#/vis/viewer/set/style s
#
# Draw coordinate axes:
/vis/scene/add/axes 0 0 0 1 m
#
#sets colour of logical volumes, "all" specifies all logical volumes and is default, then depth in decimal, and colour and opacity following background rules
/vis/geometry/set/colour tpcFidVolume 0 blue 1
/vis/geometry/set/colour innerVesselVolume 0 0 0.7 0.7 0.2 1           #yellow
/vis/geometry/set/colour motherVolume 0 grey 1
/vis/geometry/set/colour vesselVolume 0 green 1
/vis/geometry/set/colour rockVolume 0 red 1

#set the visibilty
/vis/geometry/set/visibility rockVolume 0 1
/vis/geometry/set/visibility tpcFidVolume 0 1
/vis/geometry/set/visibility innerVesselVolume 0 1
/vis/geometry/set/visibility motherVolume 0 1
/vis/geometry/set/visibility vesselVolume 0 1

#set the hidden edge
/vis/viewer/set/hiddenEdge 1
/vis/viewer/set/hiddenMarker 1

#set trajectory path colours to correspond to particle PDG code
/vis/modeling/trajectories/create/drawByParticleID

#pink for proton
/vis/modeling/trajectories/drawByParticleID-0/setRGBA proton 0.9 0.1 0.5 0.8

#brown for neutron
/vis/modeling/trajectories/drawByParticleID-0/setRGBA neutron 0.25 0.1 0.1 0.9

#red for gamma
/vis/modeling/trajectories/drawByParticleID-0/set gamma red

#white for e+
/vis/modeling/trajectories/drawByParticleID-0/set e+ white

#green for e-
/vis/modeling/trajectories/drawByParticleID-0/set e- green

#light blue for muon-
/vis/modeling/trajectories/drawByParticleID-0/setRGBA mu- 0.4 0.8 1.0 0.0

#purple for muon+
/vis/modeling/trajectories/drawByParticleID-0/setRGBA mu+ 0.3 0.1 0.9 0.9

#blue for all neutrinos
/vis/modeling/trajectories/drawByParticleID-0/set anti_nu_mu blue
/vis/modeling/trajectories/drawByParticleID-0/set nu_mu blue
/vis/modeling/trajectories/drawByParticleID-0/set anti_nu_e blue
/vis/modeling/trajectories/drawByParticleID-0/set nu_e blue

#orange for pi+/-
/vis/modeling/trajectories/drawByParticleID-0/setRGBA pi+ 0.6 0.3 0.1 0.5
/vis/modeling/trajectories/drawByParticleID-0/setRGBA pi- 0.6 0.3 0.1 0.5

# for drawing the tracks
/vis/scene/add/trajectories

# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
#/vis/modeling/trajectories/create/drawByCharge
#/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
#/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 1
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
/vis/scene/add/hits
#
# To draw only gammas:
#/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add muon
#
# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
#/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/set e- blue
#
# To superimpose all of the events from a given run:
#/vis/scene/endOfEventAction accumulate
#
# Re-establish auto refreshing and verbosity:
#/vis/viewer/set/autoRefresh true
#
# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush